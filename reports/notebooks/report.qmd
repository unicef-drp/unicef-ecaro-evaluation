---
title: Country Programme Evaluations
subtitle: Country Report for TÃ¼rkiye
description: This report presents evidence from internal UNICEF sources to support country programme evaluations (CPEs) in Europe and Central Asia Region (ECAR).
title-block-banner: "#1CABE2"
date: today
format:
  html:
    embed-resources: true
    page-layout: full
    toc: true
    toc-depth: 3
    theme: cerulean
    css: styles.css
execute:
  echo: false
  warning: false
  output: asis
jupyter: python3
bibliography: report.bib
csl: vancouver-2
---

```{python}
#| tags: [parameters]
COUNTRY = 'BLR'
```

```{python}
import re
from pathlib import Path

import pandas as pd
from IPython.display import Markdown, display

import unicef_cpe 
from unicef_cpe.plotting import MODEBAR_CONFIG, go, PALLETE_QUALITATIVE, legend_style, goal_area_colors, px, make_subplots
from unicef_cpe.config import DATA_DIR, OUTPUT_DATA_DIR
from IPython.display import display, HTML

# settings
PATH_DATASET = OUTPUT_DATA_DIR / COUNTRY /'cpe_evaluation_data.xlsx'
RENDERER = None

# datasets
xlsx = pd.ExcelFile(PATH_DATASET)
dataset = {sheet_name: xlsx.parse(sheet_name) for sheet_name in xlsx.sheet_names}
social_post_dataset = {}
```

```{python}
def format_as_list(items: list, max_items: int = 10, sort: bool = True) -> str:
    if sort:
      items = sorted(items)
    markdown = '\n'.join([f'- {item}' for item in items[:max_items]]) + '\n\n'
    return markdown
```

## Context


::: {.panel-tabset}

#### Overview

::: {.callout-note}
Below is an AI-generated summary of the country's context and situation of children from 2018-2023 Country Office Annual Reports (COARs).
:::

```{python}
df_context = dataset.get('coar_context_summaries_context_overall')
if df_context is not None and df_context.empty is False:
  summary = df_context['context'].values[0].replace('# ', '')
  print(summary)
```

#### Year-by-Year Highlights

::: {.callout-note}
Below is an AI-generated summary, **year by year** of the country's context and situation of children from 2018-2023 Country Office Annual Reports (COARs).
:::

```{python}
df_context = dataset.get('coar_context_summaries_context_by_year')
if df_context is not None and df_context.empty is False:
  summary = '\n\n'.join([context for context in df_context['context']])
  print(summary)
```

:::

## Relevance

_To what extent has UNICEF responded to the (changing) needs of the most vulnerable throughout the programme implementation?_

::: {.panel-tabset}

#### Identified needs categorized by goal areas

::: {.callout-note}
Below is an AI-generated list of identified needs extracted from the 2018-2023 Country Office Annual Reports (COARs) categorized the needs by goal areas.
:::

```{python}
#| fig-cap: "Source: [Coar Needs by Goal Area](/cpe_evaluation_data.xlsx)"

df_timeline = dataset.get('coar_needs_by_goal_area')
if df_timeline is not None and df_timeline.empty is False:
  fig = unicef_cpe.plotting.plot_stacked_bar_chart(df_timeline, stack_by='goal_area', count_of = 'need')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```


```{python}
#| fig-cap: "Source: [Coar Needs by Goal Area](/cpe_evaluation_data.xlsx)"
if df_timeline is not None and df_timeline.empty is False:
  dynamic_content = unicef_cpe.plotting.generate_timeline_from_df(df_timeline)
  display(HTML(dynamic_content))
```

#### Programme Structure

::: {.callout-note}
Outlined below are the Country Office Outcomes and Outputs derived from the **InSight Programme Structure** and the **Country Programme Documents (CPDs)**. The CPD priorities are directly sourced from the original documents. 
**Note**: In some instances, the **Output description** may be unavailable in the **InSight Programme Structure**, as certain **Outputs** may have been **added after the CPD was finalized**.
:::

```{python}
#| panel: tabset
df_wp = dataset.get('programme_structure')
if df_wp is not None:
  records = df_wp['CP'].unique()
  text = ''
  for record in records:
    print('#### {}'.format(record))
    mask = df_wp['CP'] == record
    text = unicef_cpe.plotting.generate_programme_markdown(df_wp[mask])
    print(text)

df_cpd = dataset.get('cpd_priorities')
if df_cpd is not None:
  records = df_cpd.groupby('period', as_index=False).agg({'priority': list, 'summary': list}).to_dict(orient='records')
  text = ''
  for record in records:
    print('#### {} CPD'.format(record['period']))

    text = ''
    for priority, summary in zip(record['priority'], record['summary']):
      text += f'*{priority}*\n\n{summary}\n\n'
    print(text)
```

:::

### 1. To what extent UNICEF positioning in the country and implementation strategies enable itself to respond to those needs?

::: {.panel-tabset}

#### Goal Area Overview

```{python}
#| panel: tabset
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx) @funds_utilization_cube @programme_structure"

df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:
  df_activities = df_activities[~pd.isnull(df_activities['cp'])]

  for cp in df_activities['cp'].unique():
    display(Markdown(f'##### {cp}'))
    mask1 = df_activities['cp'] == cp
    fig = unicef_cpe.plotting.create_bubble_chart(df_activities[mask1], group_by='goal_area', x_axis='expenditure',y_axis='activity_name', frame ='cp')

    fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### Strategy Overview

```{python}
#| panel: tabset
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx) @funds_utilization_cube @programme_structure"
df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:
  df_activities = df_activities[~pd.isnull(df_activities['cp'])]

  for cp in df_activities['cp'].unique():
    display(Markdown(f'##### {cp}'))
    mask1 = df_activities['cp'] == cp

    fig = unicef_cpe.plotting.create_bubble_chart(df_activities[mask1], group_by='strategy_name', x_axis='expenditure',y_axis='activity_name', frame ='cp')
    fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### Goal - Strategy Expenditures Overview 

```{python}
#| panel: tabset
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx) @funds_utilization_cube @programme_structure"
df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:
  for cp in df_activities['cp'].unique():
    display(Markdown(f'##### {cp}'))
    cp_mask = df_activities['cp'].eq(cp)
    fig = unicef_cpe.plotting.plot_sankey(df_activities[cp_mask], source_node='goal_area', target_node='strategy_name', aggregation_method='utilized_sum')
    fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)

```

#### Goal Area - Result Expenditures Overview

```{python}
#| panel: tabset
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx) @funds_utilization_cube @programme_structure"
df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:
  for cp in df_activities['cp'].unique():
    display(Markdown(f'##### {cp}'))
    cp_mask = df_activities['cp'].eq(cp)
    fig = unicef_cpe.plotting.plot_sankey(df_activities[cp_mask], source_node='goal_area', target_node='result_area', aggregation_method='utilized_sum')
    fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```


#### Gender Marker

::: {.panel-tabset}

#### By Expenditure

```{python}
#| label: fig-gender-marker-funds
#| fig-cap: "Source: [Gender Marker](/cpe_evaluation_data.xlsx) @programme_structure"

df = dataset.get('gender_marker')
if df is not None:
  fig = unicef_cpe.plotting.plot_tags(
    df=df, 
    label='Gender Marker',
    y_title ='Expenditures (%)')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### By Output

```{python}
#| label: fig-gender-marker-count
#| fig-cap: "Source: [Gender Marker Count](/cpe_evaluation_data.xlsx) @programme_structure"

df = dataset.get('gender_marker_count')
if df is not None:
  fig = unicef_cpe.plotting.plot_tags(
    df=df, 
    label='Gender Marker',
    y_title ='Output Count')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### Evidence of Gender Activities Overview

```{python}
#| fig-cap: "Source: [Evidence of Gender Activity](/cpe_evaluation_data.xlsx) [@summary_narrative_analysis]"
df_timeline = dataset.get('evidence_of_gender_activity')
if df_timeline is not None:
  fig = unicef_cpe.plotting.plot_timeline_description_bar_chart(df_timeline, title_col='gender_activity_title', text_col='gender_activity_text')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### Evidence of Gender Activities Highlight

```{python}
#| fig-cap: "Source: [Evidence of Gender Activity](/cpe_evaluation_data.xlsx) [@summary_narrative_analysis]"
df_timeline = dataset.get('evidence_of_gender_activity')
if df_timeline is not None:
  dynamic_content = unicef_cpe.plotting.generate_timeline_markdown(df_timeline, itermediate_title='gender_activity_title', description='gender_activity_text')
  print(dynamic_content)
```

:::

#### Humanitarian Marker

::: {.panel-tabset}

#### By Expenditure

```{python}
#| label: fig-humanitarian-marker-funds
#| fig-cap: "Source: [Humanitarian Marker](/cpe_evaluation_data.xlsx) @programme_structure"

df = dataset.get('humanitarian_marker')
if df is not None:
  fig = unicef_cpe.plotting.plot_tags(
    df=df, 
    label='Humanitarian Marker',
    y_title ='Expenditures (%)')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### By Output

```{python}
#| label: fig-humanitarian-marker-count
#| fig-cap: "Source: [Humanitarian Marker Count](/cpe_evaluation_data.xlsx) @programme_structure"

df = dataset.get('humanitarian_marker_count')
if df is not None:

  fig = unicef_cpe.plotting.plot_tags(
    df=df, 
    label='Humanitarian Marker',
    y_title ='Output Count')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

:::

#### Disability Tag

::: {.panel-tabset}

#### By Expenditure

```{python}
#| label: fig-disability-tag-funds
#| fig-cap: "Source: [Disability Tag](/cpe_evaluation_data.xlsx) @programme_structure"

df = dataset.get('disability_tag')
if df is not None:

  fig = unicef_cpe.plotting.plot_tags(
    df=df, 
    label='Disability Tag',
    y_title ='Expenditures (%)')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```


#### By Activity

```{python}
#| label: fig-disability-tag-count
#| fig-cap: "Source: [Disability Tag Count](/cpe_evaluation_data.xlsx) @programme_structure"

df = dataset.get('data_disability_tag_count')
if df is not None:
  fig = unicef_cpe.plotting.plot_tags(
    df=df, 
    label='Disability Tag',
    y_title ='Activity Count')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

:::

#### Adolescent Tag

::: {.panel-tabset}

#### By Expenditure

```{python}
#| label: fig-adolescent-tag-funds
#| fig-cap: "Source: [Adolescent Tag](/cpe_evaluation_data.xlsx) @programme_structure"


df = dataset.get('adolescent_tag')
if df is not None:
  fig = unicef_cpe.plotting.plot_tags(
    df=df, 
    label='Adolescent Tag',
    y_title ='Expenditures (%)')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### By Activity

```{python}
#| label: fig-adolescent-tag-count
#| fig-cap: "Source: [Adolescent Tag Count](/cpe_evaluation_data.xlsx) @programme_structure"

df = dataset.get('adolescent_tag_count')
if df is not None:
  fig = unicef_cpe.plotting.plot_tags(
    df=df, 
    label='Adolescent Tag',
    y_title ='Activity Count')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

:::

:::

### 2. How has UNICEF determined their ability to respond to those needs vis-Ã -vis other stakeholders?  Are there any needs that are not prioritized by UNICEF that have been identified and responded by other stakeholders?

::: {.panel-tabset}

#### SitAns Recommendations

::: {.callout-note}
This section provides an AI-generated summary of recommendations extracted from the country's most recent **situational analysis (SitAn)**.
:::

```{python}
#| fig-cap: "Source: [Sitans Reccomendations By Goal Area](/cpe_evaluation_data.xlsx)"

df_timeline = dataset.get('sitans_reccomendations_by_goal_area')
if df_timeline is not None and df_timeline.empty is False:
  dynamic_content = unicef_cpe.plotting.generate_collapsable_markdown(df_timeline, pargagph_title= 'goal_area', description='recommendation')
  print(dynamic_content)
else:
  print('No Information.')
```


#### UNSCDF National Priorities 

::: {.callout-note}
This section provides an AI-generated summary of extracted recommendations categorized by goal areas from the country's most recent situational analysis (SitAn) and the UN Sustainable Development Cooperation Framework (UNSDCF)
:::

```{python}

df_timeline = dataset.get('unsdcf_df_priorities_by_goal_area')
if df_timeline is not None and df_timeline.empty is False:
  dynamic_content = unicef_cpe.plotting.generate_collapsable_markdown(df_timeline, pargagph_title= 'goal_area', description='priority')
  print(dynamic_content)
else:
  print('No Information.')
```

:::

### 3. What are the comparative advantages of UNICEF in the identification, advocacy and programmatic work in relation to other actors in the country? Are these strengths a result of UNICEF institutional features or are they specific to the Country Office?


::: {.panel-tabset}


#### Comparative Advantages

::: {.callout-note}
This section provides an AI-generated summary of the main comparative advantages etracted from the latest **Programme Strategy Note (PSN)**.
:::

```{python}
#| fig-cap: "Source: [Psns Comparative Advantages](/cpe_evaluation_data.xlsx)"
df_timeline = dataset.get('psns_comparative_advantages')
if df_timeline is not None and df_timeline.empty is False:
  dynamic_content = unicef_cpe.plotting.generate_collapsable_markdown(df_timeline, pargagph_title= 'goal_area', description='comparative_advantage')
  print(dynamic_content)
else:
  print('No Information.')
```

#### SDG Areas

::: {.panel-tabset}

#### Funding Source by SDG Area

::: {.callout-note}
Expenses in **Funding Source** by **SDG Area** are from the **Startegic Plan** for the latest two **Country Programme**. **Please Note** that do not correspond directly to Funds Utilization in the Country Programme Cycles.

Expenses in Agency Funding by SDG Area are from the UN Sustainable Development Cooperation Framework (UNSDCF) for years 2021 to 2024 (there is no UNICEF data for 2024).
:::

```{python}
#| label: fig-expenses-by-SDG
#| fig-cap: "Source: [CP Funds And Sdg](/cpe_evaluation_data.xlsx) [@insight_programme_cubes]"

df_sdg = dataset.get('cp_funds_and_sdg')
if df_sdg is not None:
  # aggregate Funds by SDG Area, Country and CP
  df_sdg = df_sdg.groupby(['goal_area', 'goal_area_code', 'country', 'cp', 
                  'funds_type','start_year'], as_index=False)['funds'].sum().copy()

  df_sdg.sort_values(by=['start_year', 'goal_area_code'], inplace=True, ascending=[True, True])
  fig = unicef_cpe.plotting.plot_SDG_funds(df=df_sdg)

  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
else:
  print('No Information.')
```

#### Agency Funding by SDG Area

```{python}
#| fig-cap: "Source: [Agencies SDG and Outcomes](/cpe_evaluation_data.xlsx) @insight_programme_cubes, @UNDSCF_data"


df_agencies = dataset.get('')
if df_agencies is not None and df_agencies.empty is False:

  # aggregate Funds by SDG Area, Country and CP
  df = df_agencies.groupby(['agencies', 'sdg_goal_codes', 'SDG'], as_index=False)['total_expenditure'].sum().copy()
  # drop expenditures ~ 0
  df = df[abs(df['total_expenditure']) > 0.1]
  df['proportion'] = df['total_expenditure'] / df['total_expenditure'].sum()

  fig = unicef_cpe.plotting.plot_SDG_agencies(df=df)

  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
else:
  print('No Information.')
```

:::

:::

### 4. To what extent has UNICEF been able to respond to the shifts caused by external shocks, crises, or major socio-economic and political changes? What enabled/restricted UNICEF to adapt to those shocks?

::: {.panel-tabset}

#### Goal Area Expenditures Trends 

```{python}
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx) @funds_utilization_cube, @programme_structure"

df_agencies = dataset.get('activities_programme_stucture')
if df_agencies is not None:
  fig = unicef_cpe.plotting.create_stacked_area_chart(df_activities, 'goal_area', 'expenditure', 'sum')

  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```


#### Strategy Expenditures Trends

```{python}
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx) @funds_utilization_cube, @programme_structure"

df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:
  fig = unicef_cpe.plotting.create_stacked_area_chart(df_activities, 'strategy_name', 'expenditure', 'sum')

  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### Funding Source Trends

```{python}
#| panel: tabset
#| fig-cap: "Source: [Resources Activities Programme Stucture](/cpe_evaluation_data.xlsx) @funds_utilization_cube, @programme_structure"

# Plot data by 'source' for Goal Area and Strategy
df_resources_activities = dataset.get('resources_activities_programme_stucture')
if df_resources_activities is not None:
  
  df_resources_activities = df_resources_activities[~pd.isnull(df_resources_activities['cp'])]
  display(Markdown("#### Overview"))
  fig = unicef_cpe.plotting.create_stacked_area_chart(df_resources_activities, 'source', 'expenditure', 'sum')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)

  for resource in df_resources_activities['source'].unique():
      mask = df_resources_activities['source'] == resource
      resource_data = df_resources_activities[mask].copy()

      display(Markdown(f'#### {resource}'))
      display(Markdown(f''))
      # By Goal Area
      display(Markdown(f'##### By Goal Area'))
      fig_goal = unicef_cpe.plotting.create_stacked_area_chart(resource_data, 'goal_area', 'expenditure', 'sum')
      fig_goal.show(renderer=RENDERER, config=MODEBAR_CONFIG)

      # By Strategy
      display(Markdown(f'##### By Strategy'))
      fig_strategy = unicef_cpe.plotting.create_stacked_area_chart(resource_data, 'strategy_name', 'expenditure', 'sum')
      fig_strategy.show(renderer=RENDERER, config=MODEBAR_CONFIG)

```

:::

## Efficiency

_Are UNICEFâs resources enabling the best delivery of the country programme as per identified priorities?_

### 1. What is taken into consideration to identify the most cost-effective strategies? To what extent has UNICEF positioning in the country is taken into consideration to identify those strategies?

No information.

### 2. Has UNICEF introduced innovative efficiency measures to enable it to be more effective? Which ones and How?

::: {.panel-tabset}

#### Evidence of Innovations Overview

::: {.callout-note}
This section presents an AI-generated summary of innovations described by the country office in their 2018-2023 **End-of-Year Summary Narrative**.
:::

```{python}
#| fig-cap: "Source: [Evidence of Innovations](/cpe_evaluation_data.xlsx) [@summary_narrative_analysis]"

df_timeline = dataset.get('evidence_of_innovations')
if df_timeline is not None:
  fig = unicef_cpe.plotting.plot_timeline_description_bar_chart(df_timeline, title_col='innovation_title', text_col='innovation_text')
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### Evidence of Innovations Highlight

```{python}
#| fig-cap: "Source: [Evidence of Innovations](/cpe_evaluation_data.xlsx) [@summary_narrative_analysis]"

if df_timeline is not None:
  dynamic_content = unicef_cpe.plotting.generate_timeline_markdown(df_timeline)
  print(dynamic_content)
```

:::

::: {.panel-tabset}

#### Innovations Expenditures

::: {.callout-note}
This section provides an overview of innovations identified through associated **Generic Intervention Codes** from the **country programme**.
:::

```{python}
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx)  @funds_utilization_cube, @programme_structure"

df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:
  fig = unicef_cpe.plotting.plot_innovation(df_activities)
  if fig is None:
    print("There is no evidence of Expenditure on Innovation as Implementation Strategy")
  else:
    fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### Innovations Activities

::: {.callout-note}
This section provides an overview of innovations identified through associated **Generic Intervention Codes** from the **country programme**.
:::

```{python}
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx)  @funds_utilization_cube, @programme_structure"
df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:
  fig = unicef_cpe.plotting.plot_innovation(df_activities, metric='activities')
  if fig is None:
    print("There is no evidence of Expenditure on Innovation as Implementation Strategy")
  else:
    fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

:::


### 3. To what extent the financial resources were allocated in alignment to the defined  priorities?  Are available financial resources (RR, OR) affecting strategic allocation of the resources to priorities and programme implementation?

This section provides an overview of funds utilization by the CO by funding source and results area.

::: {.panel-tabset}

#### By Country Programme

```{python}
#| label: fig-funding-by-cp
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx)  @funds_utilization_cube, @programme_structure"

df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:
  fig = unicef_cpe.plotting.plot_cp(df_activities)
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### By Country Programme, Funding Source and Donor 
```{python}
#| label: fig-funding-by-donor
#| fig-cap: "Source: [CP Funds Structure](/cpe_evaluation_data.xlsx)  @funds_utilization_cube, @programme_structure"

df_funds_agg = dataset.get('cp_funds_stucture')
if df_funds_agg is not None:
  df_funds_agg.sort_values(by=['start_year'], inplace=True, ascending=True)
  fig = unicef_cpe.plotting.plot_donor_funds(df=df_funds_agg)
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```


#### By Outcome

```{python}
#| label: fig-funding-by-outcome
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx)  @funds_utilization_cube, @programme_structure"


df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:
  fig = unicef_cpe.plotting.plot_treemap(
    df=df_activities,
    path=['country', 'cp', 'outcome_name']
  )
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### By Output

```{python}
#| label: fig-funding-by-output
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx)  @funds_utilization_cube, @programme_structure"

df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:

  fig = unicef_cpe.plotting.plot_treemap(
    df=df_activities.copy(),
    path=['country', 'cp', 'output_name']
  )
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### By Activity

```{python}
#| label: fig-funding-by-activity
#| fig-cap: "Source: [Activities Programme Stucture](/cpe_evaluation_data.xlsx)  @funds_utilization_cube, @programme_structure"
#| 
df_activities = dataset.get('activities_programme_stucture')
if df_activities is not None:
  fig = unicef_cpe.plotting.plot_treemap(
    df=df_activities.copy(),
    path=['country', 'cp', 'activity']
  )
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

:::

### 4. To what extent the human resources were allocated in alignment to the defined  priorities? Are staff structures defined based on fund availability/priorities? How is this enabling/restricting UNICEF delivery?


::: {.panel-tabset}


#### Travel Authorization

This section provides an overview of the authorised travel for the country office personnel.

```{python}
#| label: fig-travel-expenses
#| fig-cap: "Source: [Insight Trips](/cpe_evaluation_data.xlsx) [@finance_trips]"

df = dataset.get('insight_trips')
if df is not None:
  fig = unicef_cpe.plotting.plot_trips(df)
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

:::

## Effectiveness

_To what extent is UNICEF through its strategies, operations, partnerships and advocacy managing to effectively contribute to results for childrenâs well-being?_

### 1. What external and internal enabling/restrictive factors affected its contribution?  How UNICEFâs positioning enable/restricted itself to deliver results?


#### Major Contributions

::: {.callout-note}
Below is an AI-generated summary of major contributions and drivers of results from 2018-2023 Country Office Annual Reports (COARs).
:::

```{python}

df = dataset.get('COAR_summaries')
if df is not None:
  summary = ''.join(df['contributions_summary'].values)
  print(unicef_cpe.utils.remove_section_title(summary, h_title='####'))
```



### 2. To what extent is UNICEF positioned itself among the most influencing stakeholder to achieve results for children? To what extent has UNICEF positioned itself to contribute to policy change?

No information.

### 3. To what extent UNICEF positioning in the general public, CSOs , and private sector enables the delivery of results for children?

::: {.callout-note}
The tabset below shows core programme indicators tracked by the country office by group, depending on whether or not the observed values have met the targets.
:::

```{python}
# Load the data


df = dataset.get('indicator_codes')
if df is not None:
  df = df[df['target_year'] > 2017]

  # Assuming you already have these variables defined: indicator_categories, goal_areas
  indicator_categories = df['indicator_category'].unique()
  goal_areas = df['goal_area'].unique()

  # Dictionary to hold the generated heatmaps
  heatmaps = {}

  # Generate the heatmaps for each category and goal_area
  for category in indicator_categories:
      heatmaps[category] = {}
      for goal_area in goal_areas:
          df_filtered = df[(df['indicator_category'] == category) & (df['goal_area'] == goal_area)].copy()
          if not df_filtered.empty: # Only create heatmaps if data is available
            try:
                heatmaps[category][goal_area] = unicef_cpe.plotting.generate_heatmap(df_filtered)
            except Exception as e:
                heatmaps[category][goal_area] = None

```

#### Indicator Achievements 
::: {.panel-tabset}

#### Aggregated view

```{python}
#| fig-cap: "Source: [Total Indicator Achievements](/cpe_evaluation_data.xlsx)  [@indicator_data]"

df_indicators = dataset.get('total_indicator_achievements')
if df_indicators is not None:

  df_indicators = df_indicators[df_indicators['target_year'] > 2017]
  # Grouping by "ram3_year" and counting "rating" based on "indicator_rating_type"

  # Variables that can be changed for plotting:
  # indicator_ratings_types_list = ['End-year assessment','End-Term','Mid-year assessment']
  # x_value_list = ["finalization_year", "target_year"]
  rating_type = 'End-year assessment'
  x_value = "target_year"
  df_indicators = df_indicators.loc[df_indicators['indicator_rating_type'].eq(rating_type)].copy()
  df_indicators = df_indicators.groupby([x_value, "rating"]).size().unstack(fill_value=0).reset_index()
  fig = unicef_cpe.plotting.plot_ram_indicators(df_indicators,  x_value, rating_type)
  fig.update_layout(
      legend_title_text='',
      legend=legend_style,
      yaxis_title='Number of Indicators'
      )
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### Standard Indicators

```{python}
#| panel: tabset
#| fig-cap: "Source: [Indicator Codes](/cpe_evaluation_data.xlsx) [@indicator_data])"


for goal_area in goal_areas:
    category = indicator_categories[1]
    if goal_area in heatmaps[category]:
        if heatmaps[category][goal_area] is not None:
            display(Markdown(f'#### {goal_area}'))
            fig = heatmaps[category][goal_area]
            fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### Additional Indicators

```{python}
#| panel: tabset
#| fig-cap: "Source: [Indicator Codes](/cpe_evaluation_data.xlsx) [@indicator_data])"
for goal_area in goal_areas:
    category = indicator_categories[0]
    if goal_area in heatmaps[category]:
        if heatmaps[category][goal_area] is not None:
            display(Markdown(f'#### {goal_area}'))
            fig = heatmaps[category][goal_area]
            fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

:::

::: {.callout-note}
The tabset below shows relevant indicators from **TransMonEE** database by thematic groups.
:::

```{python}
#| panel: tabset
#| fig-cap: "Source: [Total Indicator Achievements](/cpe_evaluation_data.xlsx) [@TransMonEE_indicators])"

df = pd.read_excel(DATA_DIR.joinpath('raw', 'SDMX', 'SDMX TransMonEE Indicators.xlsx'))

df_indicators = dataset.get('total_indicator_achievements')
if df_indicators is not None:

  mask = df['country'].eq(COUNTRY) & df['wealth'].eq('Total') & df['age'].eq('Total')
  df = df.loc[mask].reset_index(drop=True)

  plotted = set()
  for variables, df_group in df.groupby(['group', 'indicator_id']):
    group, *_ = variables
    if group not in plotted:
      display(Markdown(f'#### {group}'))
      plotted.add(group)
    fig = unicef_cpe.plotting.plot_transmonee(df_group)
    fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

### 4. To what extent is UNICEF successfully introducing and implementing innovative models to be delivered at scale through national systems? How? What is enabling/restricting the introduction and implementation of these innovative interventions?

No information.

## Sustainability

_To what extent did UNICEF manage to ensure sustained political, financial andÂ institutional commitment in priority areas within the most influentialÂ stakeholders?â_

### 1. To what extent does UNICEF lever its positioning to successfully influenceÂ sustained public expenditure in prioritized areas?â

#### Partners by GIC

```{python}
#| label: fig-patner-count-by-gic
#| fig-cap: "Source: [Partner Count by Gic](/cpe_evaluation_data.xlsx)"


df = dataset.get('partner_count_by_gic')
if df is not None and df.empty is False:
  fig = unicef_cpe.plotting.plot_partner_count_by_gic(df)
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

### 2. To what extent does UNICEF build strategic partnerships (technical andÂ advocacy) to ensure sustained results of UNICEFâs supported nationalÂ programmesÂ and policies?â

::: {.panel-tabset}


```{python}
# todo commented this section since the data does not seem to be used anywhere. to check if this breaks something.
df_agreement = dataset.get('partnership_agreements')
```

#### Agrements Duration

```{python}
#|fig-cap: "Source: [Partnership Agreements](/cpe_evaluation_data.xlsx) [@partnership_agreements]"

if df_agreement is not None:

  agreement_length_by_year = df_agreement.groupby(['start_year', 'agreement_length']).size().unstack(fill_value=0)

  
  agreement_length_by_year_percent = agreement_length_by_year.div(agreement_length_by_year.sum(axis=1), axis=0) * 100

  # Create the plot using Plotly
  fig = unicef_cpe.plotting.make_subplots(specs=[[{"secondary_y": True}]])
  if 'short' in agreement_length_by_year.columns:
    # Add stacked bars for short and long agreements using custom colors
    fig.add_trace(
        go.Bar(x=agreement_length_by_year.index, y=agreement_length_by_year['short'], 
              name='Short Agreements (â¤ 365 days)', marker_color=PALLETE_QUALITATIVE[0]),
        secondary_y=False,
    )
  if 'long' in agreement_length_by_year.columns:
    fig.add_trace(
        go.Bar(x=agreement_length_by_year.index, y=agreement_length_by_year['long'], 
              name='Long Agreements (> 365 days)', marker_color=PALLETE_QUALITATIVE[1]),
        secondary_y=False,
    )

  if 'long' in agreement_length_by_year_percent.columns:
    # Add a line for the percentage of long agreements using custom colors
    fig.add_trace(
        go.Scatter(x=agreement_length_by_year_percent.index, y=agreement_length_by_year_percent['long'], 
                  mode='lines+markers', name='Percentage of Long Agreements', 
                  marker=dict(color=PALLETE_QUALITATIVE[2]), line=dict(color=PALLETE_QUALITATIVE[2], width=2)),
        secondary_y=True,
    )

  # Update the layout
  fig.update_layout(
      #title='Number of Short and Long Agreements with Percentage of Long Agreements',
      xaxis=dict(
          title='Year',
          tickmode='linear',  # Ensure evenly spaced ticks
          dtick=1,  # Force integer ticks every 1 year
          tickformat='d',  # Display ticks as integers (no decimal points)
      ),
      yaxis_title='Number of Agreements',
      legend_title='Agreement Type',
      barmode='stack',
  )

  # Set secondary y-axis properties
  fig.update_yaxes(title_text="Percentage of Long Agreements (%)", secondary_y=True)

  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```


#### Partners new to previous years

This section provides  an overview of the distribution of short and long agreements and their renewal rates.

```{python}
#| label: fig-patner-year-to-year-new
#| fig-cap: "Source: [Partner data](/cpe_evaluation_data.xlsx) [@partnership_data]"

df = dataset.get('partner_count_new_to_past')
if df is not None and df.empty is False:
  fig = unicef_cpe.plotting.plot_partner_count_new_to_past(df)
      
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

#### Partners by yearly fr amount

```{python}
#| label: fig-patner-fr-consumed-by-year
#| fig-cap: "Source: [Partner data](/cpe_evaluation_data.xlsx) [@partnership_data]"


df = dataset.get('hr_count_againspartner_fr_consumed_by_yeart_utilized_by_goal_area')
if df is not None and df.empty is False:
  df = df.pivot(index=['country', 'year'], columns='partner_rating_binned', values=['implementing_partner', 'fr_amount']).reset_index()
  mask = df['country'].eq(COUNTRY)
  df = df.loc[mask].copy()

  fig = unicef_cpe.plotting.plot_partner_fr_consumed_by_year(df)
      

  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```

:::

### 3. To what extent has UNICEF has been able to partner with key stakeholders orÂ influence them to ensure that innovative models are properly resourced overÂ time to be scaled up in the country?

No information.

## Coherence

_To what extent other stakeholders, including UN Agencies, IFIs, INGOs, CSOs, and other development partners support or undermine UNICEF action in the country?_

### 1. To what extent other stakeholders, including UN Agencies, IFIs, INGOs, CSOs, and other development partners support or undermine UNICEF action in the country?

This section details country partnership agreements and top implementing partners.

::: {.callout-note}
Below is an AI-generated summary of the country's partnerships and collaborations based on COARs.
:::

```{python}

df_partnerships_summary = dataset.get('coars_partnerships_summary')
if df_partnerships_summary is not None and df_partnerships_summary.empty is False:
  summary = df_partnerships_summary['partnerships_summary'].values[0].replace('# ', '')
  print(summary)
```


::: {.panel-tabset}

#### Partnership Agreements

```{python}
#| label: fig-patner-year-by-year
#| fig-cap: "Source: [Partner count by country year](/cpe_evaluation_data.xlsx) [@partnership_data]"

df = dataset.get('df_partner_count_by_country_year')
if df is not None and df.empty is False:

  fig = unicef_cpe.plotting.plot_partner_count_by_country_year(df)

  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG)
```



#### Partner Transfers by Vendor

```{python}
#| label: fig-top-partners
#| fig-cap: "Source: [Partnership Transfers](/cpe_evaluation_data.xlsx) [@partnership_transfers]"

df = dataset.get('partnership_transfers')
if df is not None and df.empty is False:
  df = df.groupby(['country', 'vendor'], as_index=False).agg({'transfers_to_ip': 'sum'})
  df.sort_values(['country', 'transfers_to_ip'], ascending=[True, False], ignore_index=True, inplace=True)
  mask = df['country'].eq(COUNTRY)

  fig = unicef_cpe.plotting.plot_top_partners(df.loc[mask])
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG, height=400)
```

#### Partner Transfers by Area

```{python}
#| label: fig-transfers-by-results-area
#| fig-cap: "Source: [Partnership Transfers](/cpe_evaluation_data.xlsx) [@partnership_transfers]"

df = dataset.get('partnership_transfers')
if df is not None and df.empty is False:

  #Remove Goal Area code from text -> it allows comparing Gol Areas between different cycles
  df['goal_area'] = df['goal_area'].str.replace(r'^\d+\s*', '', regex=True)
  df['goal_area'] = df['goal_area'].str.replace('Cross-Sectoral', 'Cross Sectoral')

  df = df.groupby(['country', 'fr_start_year', 'goal_area'], as_index=False).agg({'transfers_to_ip': 'sum'})

  fig = unicef_cpe.plotting.plot_partnerships_by_area(df)
  fig.show(renderer=RENDERER, config=MODEBAR_CONFIG, height=400)
```


:::

### 2. To what extent advocacy and programmatic work has triggered synergies, complementarities with other stakeholders to support UNICEF advocacy and programmatic work?

No information.

